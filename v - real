https://github.com/snehasishdey333/youtube-2023/tree/blog-app-mern

index.js
const express = require('express')
const colors = require('colors')
const dotenv = require('dotenv')
const connectDB = require('./config/db')
const authRoute = require('./routes/auth')

dotenv.config({path: './config/config.env'})
connectDB();
const app = express()
app.use(express.json())
app.use('/api/auth', authRoute)

const PORT = process.env.PORT || 5000;

app.listen(PORT, console.log(`Server running on port ${PORT}`.yellow.bold))
-------------------------------------------------------------------------
routes folder -> auth.js
const express = require('express')
const router = express.Router()
const { registerUser, loginUser, logoutUser } = require('../controllers/users')

router.route("/register").post(registerUser);
router.route("/login").post(loginUser)
router.route("/logout").get(logoutUser)
module.exports = router; 
-------------------------------------------------------------------------
models folder -> User.js
const mongoose = require("mongoose");
const { Schema, model } = mongoose;
const UserSchema = new Schema(
  {
    username: {
      type: String,
      trim: true,
      required: [true, "Something wrong with registering username"],
      unique: true,
    },
    email: {
      type: String,
      trim: true,
      required: [true, "Something wrong with registering email"],
      unique: true,
    },
    password: {
      type: String,
      trim: true,
      required: [true, "Something wrong with registering password"],
    },
  },
  { timestamps: true }
);

module.exports = model("User", UserSchema);
-------------------------------------------------------------------------
controllers folder -> users.js
const User = require('../models/User')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')

//! Register User, POST, /api/auth/register
exports.registerUser = async (req, res) => {
    try {
        const {username, email, password} = req.body;
        const salt = await bcrypt.genSalt(10)
        const hashedPassword = await bcrypt.hashSync(password, salt)
        const newUser = new User({username, email, password: hashedPassword})
        await newUser.save()
        return res.status(201).json({
            success: true,
            data: newUser
        })
    } catch (error) {
        if(error.name === "ValidationError"){
         const messages = Object.values(error.errors).map(val => val.message)
            return res.status(400).json({
                sucess: false,
                errorMsg: messages
            })
        }else{
            return res.status(500).json({
                success:false,
                errorMsg: "Server Error"
            })
        }
    }
}
exports.loginUser = async (req, res) => {
    try {
        const checkUser = await User.findOne({email: req.body.email})
        if (!checkUser) {
          return res.status(401).json({
            success: false,
            ErrorMsg: "Cannot find User",
          });
        }
        const match = await bcrypt.compare(
          req.body.password,
          checkUser.password
        );
        if(!match){
            return res.status(401).json({
                success: false,
                ErrorMsg: "Incorrect Password"
            })
        }
        const token = jwt.sign({id:checkUser._id}, process.env.SECRET, {expiresIn: "1d"})

        //* the ...info grabs everything except password from checkUser._doc
        const {password, ...info}=checkUser._doc
         return res.cookie("token", token).status(200).json({
           success: true,
           data: info
         });
    } catch (error) {
        return res.status(500).json({
            sucess: false,
            ErrorMsg: "Server Error"
        })
    }
}
exports.logoutUser = async(req,res) => {
    try {
        return res.clearCookie("token", {sameSite:"none", secure:true}).status(201).json({
            success: true,
            Msg: "Successfully cleared token"
        })
    } catch (error) {
        return res.status(500).json({
            success: false,
            ErrorMsg: "Something wrong with server"
        })
    }
}
-------------------------------------------------------------------------
config -> db.js
const mongoose = require('mongoose')
const connectDB = async() => {
    try {
        const conn = await mongoose.connect(process.env.MONGO_URI)
        console.log(`MongoDB Connected: ${conn.connection.host}`.cyan.underline.bold);
    } catch (error) {
        console.log(`Error ${error.message}`.red);
        process.exit(1)
    }
}
module.exports = connectDB;
